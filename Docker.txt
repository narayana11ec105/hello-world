* Docker - one implementation of container based virtualization technologies

* Pre-virtualization -> 
	Hard to migrate from one server provider to the other(Ex., from IBM to Dell servers)
	Less amount resources will be used leading to wastage

* Hypervisor based virtualization - 
	One physical server, multiple OS - providers include vmWare, Virtual Box
	An hypervisor layer is introduced between physical HW and Guest OS

* Now companies are installing VM's on cloud like AWS 
* Container based virtualization - Containers are portable encapsulation of an environment in which apps are run
	- Provides run-time isolation 
	- Suppose one App requires JRE8 and other requires JRE7, runnning both on single OS is hard, containers solve this problem
	- Containers are light-weight
	- Containers contain all the app dependencies can run independently
	- Unlike Hypervisors container shame same kernel, which makes it light-weight
* Docker daemon/server is somethings that maintains containers , docker client is for user to interact with docker daemons
* Dcoker container is a running instance of Docker image
* Docker daemons receive commands from client using CLI or rest API's
* Docker is build on linux kernel, so installing it on windows/mac will nativley run LInux VM
* Images are read only templates used to create containers.
  - Images are created with the docker build command, either by us or by other docker	users.	
  - Images	are	composed of layers of other images - to prevent from Dcoker images getting bigger.	
  - Images	are	stored in a Docker registry.	
* If image is a class, then container is a run time object of an image.
* Registry is where we store our images - you can host your own image or use public docker registry
* Inside a registry we store images in repositries - Each repo contains images with same name but diff tags(usually version) - diff versions of same image
* >> docker run reposirty : tag
* >> docker run -i -t respo : tag 
   -i --> docker run in interactive mode\
   
* Useful docker commands 
	- >> docker ps -a ---> shows all docker containers that were running on that system
	- >> docker run --rm ---> removes container when execution stops
	- >> docker run -d --> run in detached mode(as a background process)
	- >> docker run --name --> give custome name to the container
	- >> docker inspect <container-id> --> displayes some low-level info regardding container
	- >> docker logs container-id

* Images are layered 
	- Images are stacked on top of each other.
	- Base Image is usually Read only File sytsem
	- Top layer is Read/Write layer, Any change to the container is written to this layer,
	- When container is deleted, this is also deleted, but underlying image remains same.
	- Multiple containers can share access to the same images

2 ways of building docker image
=======================================================
1. Docker commit - Download an image, run a container - make changes to the container and 
                  save that container as a new image. ex - download debian image and install git to it, 
				  make debian+git as a new image
				- >> docker commit <container-id> <repo_name>:<tag>
2. Write Docker File to create a docker image
    - Each instruction will create a new image layer( named as Dockerfile)
	- FROM debian:jessie (From the base image, here argument debian:jessie is the base image)
	  RUN apt-get update (Any linux command here)
	  RUN apt-get install -y git
	  RUN apt-get install -y vim
    - >> docker build -t <repositry> <context path - to copy files required for the image>
	- While running Dockerfile, docker daemon creates a container for instruction to be run, runs that instruction 
	  and created an image layer out of it and then deletes the container(containers are ephemeral)
	- Use containers to create image layer, commit an intermediate container as an image amd then delete image
	- docker daemon picks the image committed by previous instruction to create a container to run current instruction
3. Reduce number of run commands, to reduce number of image layers
4. In multi run commands, sort the arguments in alpanumeric order like, 
5. CMD - what command to run when the container starts-up
       - CMD ["echo" , "hello-world"]
6. Docker cache - If the instruction to be run is same as the previoud instruction, docker re-uses image
7. Aggressive caching is a problem - 
	- Let's suppose a  >> RUN apt-get update command is there, if it has to be used from caching at a later date,
	  it's not run again, can get an outdated version, combine that instruction with other instruction that might change , like update + install
	- Use cache invalidate flag - >> docker build -t <repositry> <context-path> --no-cache=true
8. COPY - copies file from context path to container file system
9. ADD - can download files from internet and unzip compressed files on own.
Push Images to docker hub - 
===========================================================
1. DockerHub provides free repo for public images
2. >> docker tag <image-id> lakshmitutorial/debian:<version> - ex: sudo docker tag 53a8bc29f028 narayana11ec105/first:1.0 (tag this image with a 
		docker repositry) 
3. >> docker login --username=
4. >> docker push <repo-name>/<image-name>:<tag> - ex: sudo docker push narayana11ec105/first:1.0

>> docker-machine ls ----->details about docker VM
>> docker exec --> runs certain commands inside a container
   ex - docker exec -it <image-id> bash ----> runs bash inside a container
   
Docker Container Links -
============================================================
* Communication between two docker container without exposing any network ports
>> docker run -d --name=redis redis:3.2.0
	-- alternatively run >> docker ps command to see the name of running container
>> docker run --link <name of docker container to be linked> app:1.0
* Docker creates secure tunnel between the containers using container links, need not expose any n/w ports
* Docker adds entry into /etc/hosts of recepient container with <source container ip> <name>

####################### https://www.level-up.one/things-watch-working-docker-containers/ ###########################

Docker compose -
============================================================
* Automate docker workflow, linking, configuring containers manually is cumbersome when there are more containers.
* Use docker-compose.yml file to declare all app services and start them at one go
* compose version>= 2.0 supports container discovery automatically
* >> docker-compose up (spins up all containers)
* docker compose stores all config information for managing container lifecycle
* >> docker-compose ps (to see all docker containers managed by compose)
  >> docker-compose logs <container-name>
  >> docker-compose rm (removes all container)
  >> docker-compose stop (stops all container)
* Docker-compose doesn't rebuild the image if it's found, even though a change was made in Docker file, force build
  >> docker-compose build
