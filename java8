* Method has - 
name, parameter (important) body, return type.

* Lambdas only have method body and params.
* Java is known for backward compatibility.
* Single abstract method interfaces can be used as lambdas.
* By converting all lambdas to anonymous functions, class files will increase. java doesn't convert lambdas to anonymous inner classes
* javap - disassembles a java class file.

* Invokedynamic - 

* External iterators -
 for loop and foreach loop - iterations are controlled by the user.

* numbers.forEach()
* Java 8 has type inference only for lambda expressions
* list.forEach(value -> System.out.println(value));  ----> list.forEach(System.out::println); :: method reference syntax.
   used in cases where the function doesn't mess with the data, recieves and passed data.
* Put the logic in a function and call that function in the lambdas. Don't put logic in the lambdas.
* Avoid large lambda function.
* Method references - used in cases where a method receives a parameter and just passes it ot the next caller.
  both static and no static methods can have static references. 
* (e -> e.toString) ---> (String::toString()),You know that e is a String, In the case the argument is the target on which the method is called. This syntax is similar to the 
static method reference. 
* Limitations of method references - Won't work when there are two methods potential to be replaced. 
* Function composition - series of functions - pipeline - like stream -> filter -> map -> reduce. 
* Parallel stream - create threads for reach record, uses lot of resources to get the answer faster. good to use in computation intensive.
* Stream - doesn't have data, nonmutable pipeline(function composition). It's a sequence of objects. Stream gets data from collections like arraylist, maps etc
* Stream operations
  FILTER - Let some elements thorugh and block some based on a condition, Stream<T> takes Predicate<T>
  MAP - transforms values -- number of o/p == number of i/p, double the numbers etc.
  REDUCE - take an initial value, list.stream().reduce(1, (carry, e) -> e * carry). Takes Stream<T>, second parameter is of type BiFunction<R,T,R> to produce a result of R, reduce may transform a stream into a single element.
  SUM - sum is also a reduce operation
  COLLECT - collect is also a reduce operation. toMap(lambda to odetermine key, lambda to determine value)
  Lazy evaluation - triggered only when terminal operation is triggered. 
   * take one element from the stream, apply the entire sequence of fucntions on it. Then move to next element. Dont apply first function to entire list, then second function and so on.
  
  
  Shared mutability is devil's work. avoid it.
  
  
  

